generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User status enum
enum UserStatus {
  Unknown
  L1
  L2
  FraudSuspect
}

// User role enum
enum UserRole {
  User
  Reviewer
  Admin
}

// Review request type enum
enum ReviewRequestType {
  ShippedApproval
  ViralApproval
  HoursApproval
  Other
}

// Audit log event type enum
enum AuditLogEventType {
  ProjectCreated
  ProjectSubmittedForReview
  ProjectMarkedShipped
  ProjectMarkedViral
  ProjectReviewCompleted
  UserRoleChanged
  UserVerified
  UserCreated
  ProjectDeleted
  SlackConnected
  OtherEvent
}

model Registration {
  // Personal Info
  id             String   @id @default(cuid())
  email          String   @unique
  firstName      String
  lastName       String
  githubUsername String
  birthday       DateTime

  // Address
  addressL1 String
  addressL2 String
  city      String
  state     String
  country   String
  zipCode   String
}

// NextAuth
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  slack         String?         @unique // slack user id 
  isAdmin       Boolean         @default(false) // Kept for backward compatibility
  role          UserRole        @default(User) // New role field for finer access control
  hackatimeId   String?         @unique // hackatime user id
  status        UserStatus      @default(Unknown) // User verification status
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // shipwrecked project fields
  projects Project[]
  reviews  Review[] // Relation to reviews created by this user

  // Audit log relations
  targetAuditLogs AuditLog[] @relation("AuditLogTargetUser") // Logs where this user is the target
  actorAuditLogs  AuditLog[] @relation("AuditLogActorUser") // Logs where this user is the actor
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Project {
  projectID   String  @unique
  name        String
  description String
  codeUrl     String
  playableUrl String
  screenshot  String
  hackatime   String // hackatime project name
  submitted   Boolean @default(false)

  viral     Boolean @default(false)
  shipped   Boolean @default(false)
  in_review Boolean @default(false)
  rawHours     Float
  hoursOverride Float?

  // user relation
  userId String
  user   User   @relation(fields: [userId], references: [id])

  // Project reviews
  reviews Review[]

  // Audit logs related to this project
  auditLogs AuditLog[]

  @@id([projectID, userId])
}

model Review {
  id        String   @id @default(cuid())
  comment   String
  createdAt DateTime @default(now())

  // Review request type
  reviewType ReviewRequestType? // Nullable for backward compatibility with existing reviews

  // Relation to the project being reviewed
  projectID String
  project   Project @relation(fields: [projectID], references: [projectID])

  // Relation to the user who created the review
  reviewerId String
  reviewer   User   @relation(fields: [reviewerId], references: [id])

  @@index([projectID])
  @@index([reviewerId])
}

// Audit log for tracking system events
model AuditLog {
  id          String            @id @default(cuid())
  eventType   AuditLogEventType
  description String // Human-readable description of what happened
  createdAt   DateTime          @default(now())

  // Additional data stored as JSON (optional)
  metadata Json? // For storing any relevant data about the event

  // Target user (the hack clubber affected by the action)
  targetUserId String
  targetUser   User   @relation("AuditLogTargetUser", fields: [targetUserId], references: [id])

  // Actor user (admin or reviewer who performed the action) - optional
  actorUserId String?
  actorUser   User?   @relation("AuditLogActorUser", fields: [actorUserId], references: [id])

  // Related project (if applicable) - optional
  projectId String?
  project   Project? @relation(fields: [projectId], references: [projectID])

  @@index([eventType])
  @@index([createdAt])
  @@index([targetUserId])
  @@index([actorUserId])
  @@index([projectId])
}
